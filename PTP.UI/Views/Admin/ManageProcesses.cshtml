
@{
    ViewData["Title"] = "ManageProcesses";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .event-wrapper {
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 8px;
        width: 100%;
        max-height: 500px;
        overflow: hidden;
    }

    .tab-list {
        margin-bottom: 10px;
    }

    .activity-item {
        padding: 6px 12px;
        background-color: #f1f1f1;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
        border: 1px solid #ccc;
    }


    .selected-activity {
        background-color: grey;
        color: white;
    }

    .activity-content {
        max-height: 380px;
        overflow-y: auto;
        padding-right: 8px;
    }

    .activity-entry {
        border-bottom: 1px solid #e0e0e0;
        padding: 8px 0;
    }

        .activity-entry:last-child {
            border-bottom: none;
        }


    #addProcessModal textarea {
        resize: vertical;
    }
</style>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.css" rel="stylesheet">
<script src="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<div class="container mt-4">
    <select id="projectSelect" class="form-select mb-3">
        <option selected disabled>Bir proje seçin...</option>
    </select>

    <div class="d-flex mb-2">
        <button id="addBoardBtn" class="btn btn-primary me-2">+ Yeni Kolon</button>
    </div>


    <div id="kanbanBoard"></div>
</div>

<div class="modal fade" id="addProcessModal" tabindex="-1" aria-labelledby="addProcessLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProcessLabel">Yeni İşlem Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                <input type="hidden" id="selectedProjectId" value="@ViewBag.ProjectId" />
            </div>
            <div class="modal-body">
                <form id="addProcessForm">
                    <div class="row">
                        <div class="col-md-6 border-end pe-3" style="max-height: 500px; overflow-y: auto;">
                            <div class="mb-3">
                                <label for="processTitle" class="form-label">Başlık</label>
                                <input type="text" class="form-control" id="processTitle" required />
                            </div>
                            <div class="mb-3">
                                <label for="processDescription" class="form-label">Açıklama</label>
                                <textarea class="form-control" id="processDescription" rows="6"></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Etkinlik</label>
                                <div class="event-wrapper">
                                    <div id="activityTabs" class="d-flex gap-2 flex-wrap tab-list">
                                        <div class="activity-item selected-activity">Tümü</div>
                                        <div class="activity-item">Yorumlar</div>
                                        <div class="activity-item">Geçmiş</div>
                                        <div class="activity-item">Çalışma kaydı</div>
                                    </div>

                                    <div id="activityContent" class="activity-content">
                                        <!-- Dinamik içerik buraya gelecek -->
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="col-md-6 ps-3" style="max-height: 500px; overflow-y: auto;">
                            <div class="mb-3">
                                <label class="form-label">Ayrıntılar</label>
                                <div class="mb-2">
                                    <label for="assignedUserId" class="form-label">Atanan Kişi</label>
                                    <select class="form-select" id="assignedUserId" required>
                                        <option value="" disabled selected>Seç...</option>
                                    </select>
                                </div>
                                <div class="mb-2">
                                    <label for="reporterId" class="form-label">Raporlayıcı</label>
                                    <select class="form-select" id="reporterId">
                                        <option value="" disabled selected>Seç...</option>
                                    </select>
                                </div>
                                <div class="mb-2">
                                    <label for="processType" class="form-label">Durum</label>
                                    <select class="form-select" id="processType" required>
                                        <option value="ToDo">To Do</option>
                                        <option value="InProgress">In Progress</option>
                                        <option value="Done">Done</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Güncellemeler</label>
                                <div class="alert alert-info p-2 small">Oluşturulma ve güncelleme bilgileri burada gösterilecek.</div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveProcessBtn">Kaydet</button>
            </div>
        </div>
    </div>
</div>



<script>
    let kanban = null;

    $(document).ready(function () {
        const projectId = $('#selectedProjectId').val();

        $.get('/Admin/GetAllProjects', function (data) {

            data.forEach(function (project) {
                $('#projectSelect').append(`<option value="${project.id}">${project.name}</option>`);
            });

            if (projectId) {
            $('#projectSelect').val(projectId).trigger('change');
        }

            loadUsers();

        });

        $('#projectSelect').change(function () {
            const projectId = $(this).val();
            console.log("Seçilen proje ID:", projectId);

            $.get(`/Admin/GetAllByProjectId/${projectId}`, function (processes) {
                processes = processes || [];
                if (kanban !== null) {
                    document.getElementById('kanbanBoard').innerHTML = ''; 
                }

                kanban = new jKanban({
                    element: '#kanbanBoard',
                    boards: [
                        {
                            id: '_todo',
                            title:  `
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>To Do</span>
                                    <button class="btn btn-sm btn-light border-light-subtle text-dark add-task-btn" data-type="ToDo">+ Yeni İşlem Ekle</button>
                                </div>
                            `,
                            class: 'bg-subtle',
                            item: processes.filter(p => p.processType === 'ToDo').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        },
                        {
                            id: '_inprogress',
                            title: `
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>In Progress</span>
                                    <button class="btn btn-sm btn-light border-light-subtle text-light add-task-btn" data-type="InProgress">+ Yeni İşlem Ekle</button>
                                </div>
                            `,
                            class: 'bg-warning',
                            item: processes.filter(p => p.processType === 'InProgress').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        },
                        {
                            id: '_done',
                            title: `
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Done</span>
                                    <button class="btn btn-sm btn-light border-light-subtle text-light add-task-btn" data-type="Done">+ Yeni İşlem Ekle</button>
                                </div>
                            `,
                            class: 'bg-success',
                            item: processes.filter(p => p.processType === 'Done').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        }
                    ],
                    dragEl: function (el, source) {
                        el.classList.add("dragging");
                    },
                    dragendEl: function (el) {
                        el.classList.remove("dragging");
                    },
                    dropEl: function (el, target, source, sibling) {
                        const id = parseInt(el.querySelector('[data-eid]').dataset.eid);
                        const boardId = target.closest('.kanban-board').getAttribute('data-id');
                        const newType = getColumnType(boardId);

                        const badge = el.querySelector('.badge');
                        badge.textContent = newType;

                        badge.className = 'badge';
                        if (newType === 'ToDo') badge.classList.add('bg-secondary');
                        else if (newType === 'InProgress') badge.classList.add('bg-warning');
                        else if (newType === 'Done') badge.classList.add('bg-success');

                        $.ajax({
                            url: '/Admin/UpdateType',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ id: id, newType: newType }),
                            success: function () {
                            },
                            error: function () {
                                alert("Güncellenirken hata oluştu");
                            }
                        });
                    },
                    afterRender: function () {
                        document.querySelectorAll('.kanban-board').forEach(board => {
                            const title = board.querySelector('.kanban-title-board')?.innerText.trim();
                            let dataId = '';
                            if (title?.includes('To Do')) dataId = '_todo';
                            else if (title?.includes('In Progress')) dataId = '_inprogress';
                            else if (title?.includes('Done')) dataId = '_done';

                            board.setAttribute('data-id', dataId);
                         });

                     }
                });
            });
        });

        function getColumnType(boardId) {
            switch (boardId) {
                case '_todo': return 'ToDo';
                case '_inprogress': return 'InProgress';
                case '_done': return 'Done';
                default: return 'ToDo';
            }
        }

            function getBadgeClass(processType) {
        switch (processType) {
            case 'ToDo': return 'bg-secondary';
            case 'InProgress': return 'bg-warning';
            case 'Done': return 'bg-success';
            default: return 'bg-secondary';
        }
    }

        function getCardHTML(p) {
            return `
               <div class="kanban-card-content" data-eid="${p.id}">
            <div class="d-flex justify-content-between">
                <small class="text-muted">24/7/20</small>
                <span class="badge ${getBadgeClass(p.processType)}">${p.processType}</span>
            </div>
            <h6 class="mt-2 mb-1">${p.title}</h6>
            <small class="text-muted">${p.description || 'Açıklama yok'}</small>
            <div class="mt-2 d-flex justify-content-between align-items-center">
                <div class="icons text-muted">
                    💬 2 &nbsp; 📎 1 &nbsp; 👁️ 4
                </div>
                <div>+5</div>
            </div>
        </div>`;
        }
    });

        $('#addBoardBtn').click(function () {
        const boardName = prompt("Yeni kolon adı girin:");
        if (!boardName) return;

        const boardId = '_' + boardName.toLowerCase().replace(/\s+/g, '');

        // Yeni kolon zaten varsa eklemeyi engelle
        if (document.querySelector(`[data-id="${boardId}"]`)) {
            alert("Bu isimde bir kolon zaten var.");
            return;
        }

        kanban.addBoards([
                {
                    id: boardId,
                    title: `
                        <div class="d-flex justify-content-between align-items-center">
                            <span>${boardName}</span>
                            <button class="btn btn-sm btn-light border-light-subtle text-dark add-task-btn" data-type="${boardName}">+ Yeni İşlem Ekle</button>
                        </div>
                    `,
                    class: 'bg-light',
                    item: []
                }
            ]);
        });


            $(document).on('click', '.add-task-btn', function () {
                const type = $(this).data('type');
                $('#processType').val(type);
                $('#addProcessModal').modal('show');
            });


            $('#saveProcessBtn').click(function () {
        const process = {
            projectId: $('#projectSelect').val(),
            title: $('#processTitle').val(),
            description: $('#processDescription').val(),
            processType: $('#processType').val(),
            assignedUserId: $('#assignedUserId').val()
        };

        $.ajax({
            url: '/Admin/AddProcess',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(process),
            success: function () {
                $('#addProcessModal').modal('hide');
                $('#addProcessForm')[0].reset();
                $('#projectSelect').trigger('change');
            },
            error: function () {
                alert('İşlem eklenirken hata oluştu.');
            }
        });
    });

        function loadUsers() {
        $.get('/Admin/GetAllPersonnel', function (users) {
            $('#assignedUserId').empty().append(`<option value="" disabled selected>Personel seçin...</option>`);
            users.forEach(function (u) {
                $('#assignedUserId').append(`<option value="${u.id}">${u.fullName}</option>`);
            });
        });
    }

        function getBadgeClass(processType) {
        const colors = {
            'ToDo': 'bg-secondary',
            'InProgress': 'bg-warning',
            'Done': 'bg-success'
        };
        return colors[processType] || 'bg-info'; // Yeni tipler için varsayılan renk
    }

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const activityItems = document.querySelectorAll(".activity-item");
        let selectedActivity = "";

        activityItems.forEach(item => {
            item.addEventListener("click", function () {
                // Diğerlerinden 'selected' stilini kaldır
                activityItems.forEach(el => el.classList.remove("selected-activity"));

                // Tıklanan öğeye 'selected' sınıfını ekle
                this.classList.add("selected-activity");

                // Seçilen değeri kaydet
                selectedActivity = this.textContent.trim();

                console.log("Seçilen etkinlik:", selectedActivity);
            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tabs = document.querySelectorAll(".activity-item");
        const content = document.getElementById("activityContent");

        const dummyData = {
            "Tümü": [
                "Betül Durum değiştirdi → IN PROGRESS",
                "Betül Yorum yaptı → Harika!",
                "Betül Durum değiştirdi → TEST SÜRECİ"
            ],
            "Yorumlar": [
                "Betül: Bu iş biraz daha bekleyebilir.",
                "Betül: Öncelik sırasına göre alalım."
            ],
            "Geçmiş": [
                "Durum: TO DO → IN PROGRESS",
                "Durum: IN PROGRESS → TEST SÜRECİ",
                "Durum: TEST SÜRECİ → DONE"
            ],
            "Çalışma kaydı": [
                "1 saat çalışıldı",
                "Yarım saat toplantı yapıldı"
            ]
        };

        function renderContent(tab) {
            content.innerHTML = "";
            dummyData[tab].forEach(item => {
                const div = document.createElement("div");
                div.className = "activity-entry";
                div.textContent = item;
                content.appendChild(div);
            });
        }

        tabs.forEach(tab => {
            tab.addEventListener("click", () => {
                tabs.forEach(t => t.classList.remove("selected-activity"));
                tab.classList.add("selected-activity");
                renderContent(tab.textContent.trim());
            });
        });

        // Başlangıçta tümü göster
        renderContent("Tümü");
    });
</script>

