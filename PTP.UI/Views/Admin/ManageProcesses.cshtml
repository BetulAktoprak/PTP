@model PTP.UI.Models.ManageProcessViewModel


@{
    ViewData["Title"] = "ManageProcesses";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<style>
    .event-wrapper {
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 8px;
        width: 100%;
        max-height: 500px;
        overflow: hidden;
    }

    .tab-list {
        margin-bottom: 10px;
    }

    .activity-item {
        padding: 6px 12px;
        border-radius: 20px;
        background-color: #e2e8f0;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .activity-item:hover {
            background-color: #cbd5e0;
        }

    .selected-activity {
        background-color: #4299e1;
        color: #fff;
    }
    .activity-content {
        max-height: 380px;
        overflow-y: auto;
        padding-right: 8px;
    }

    .activity-entry {
        border-bottom: 1px solid #e0e0e0;
        padding: 8px 0;
    }

        .activity-entry:last-child {
            border-bottom: none;
        }


    #addProcessModal textarea {
        resize: vertical;
    }

    #saveProcessBtn {
        background-color: #3b82f6;
        border-color: #3b82f6;
        font-weight: 600;
        padding: 0.5rem 1.25rem;
        transition: background-color 0.2s ease;
    }

        #saveProcessBtn:hover {
            background-color: #2563eb;
        }


    .add-task-btn:hover {
        color: #000 !important;
    }

    .add-board-btn {
        font-size: 2.5rem;
        width: 48px;
        padding: 0;
        text-align: center;
        line-height: 48px;
        top: 70%;
        transform: translateY(210%);
        border: 1px solid black;
    }

    .container {
        position: relative;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
    }
    .modal-content {
        border-radius: 10px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .modal-body {
        padding: 1.5rem;
        background-color: #f9fafb;
    }

    label.form-label {
        font-weight: 600;
    }

    input.form-control, select.form-select, textarea.form-control {
        border-radius: 6px;
        border-color: #ccc;
        transition: border-color 0.2s ease;
    }

    input:focus, select:focus, textarea:focus {
        border-color: #5a67d8;
        box-shadow: 0 0 0 0.15rem rgba(90, 103, 216, 0.25);
    }

    .alert-info {
        background-color: #ebf8ff;
        border-color: #bee3f8;
        color: #2b6cb0;
        border-radius: 6px;
    }

    .file-drop-area {
        background-color: #f8f9fa;
        border: 2px dashed #ced4da;
        transition: background-color 0.3s, border-color 0.3s;
        cursor: pointer;
    }

        .file-drop-area:hover {
            background-color: #eef2f7;
            border-color: #86b7fe;
        }

        .file-drop-area.dragover {
            background-color: #dbeafe;
            border-color: #3b82f6;
        }

    #fileList li {
        margin-bottom: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #fileList button {
        border: none;
        background: none;
        font-size: 1rem;
        cursor: pointer;
    }


        #fileList li a {
            color: #0d6efd;
            text-decoration: underline;
            cursor: pointer;
        }

    .btn-dot {
        background: none;
        border: none;
        font-size: 1.2rem;
        line-height: 1;
        padding: 0;
        margin-left: 8px;
    }

    .kanban-board-header {
        overflow: visible !important;
        position: relative;
        z-index: 2;
    }

    .dropdown-menu {
        max-width: none;
        min-width: 150px; 
        z-index: 9999;
    }

    .dropdown-menu .dropdown-item {
        font-size: 0.875rem;
        padding: 6px 12px;
    }

    #kanbanWrapper {
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        padding-bottom: 10px;
    }

    #kanbanBoard {
        display: inline-flex;
        gap: 1rem;
        align-items: flex-start;
    }

    .kanban-board {
        min-width: 280px;
    }

    .kanban-drag {
        height: auto !important;
        min-height: 100px;
    }

</style>


 <link href="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.css" rel="stylesheet">
 <script src="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.js"></script> 





<div class="container mt-2">
    <div class="d-flex mb-3">
        <h2>@Model.ProjectTitle</h2>
    </div>

    <!-- Scroll alanı -->
    <div id="kanbanWrapper" style="overflow-x: auto; overflow-y: hidden; white-space: nowrap;">
        <!-- jKanban board'larını tutacak -->
        <div id="kanbanBoard" style="display: inline-flex; gap: 1rem;"></div>
    </div>
</div>


<!-- Yeni Kolon Modal -->
@* <div class="modal fade" id="addStageModal" tabindex="-1" aria-labelledby="addStageLabel" aria-hidden="true"> *@
@*     <div class="modal-dialog"> *@
@*         <form id="addStageForm"> *@
@*             <div class="modal-content"> *@
@*                 <div class="modal-header"> *@
@*                     <h5 class="modal-title">Yeni Kolon Ekle</h5> *@
@*                     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button> *@
@*                 </div> *@
@*                 <div class="modal-body"> *@
@*                     <input type="hidden" id="stageProjectId" value="" /> *@

@*                     <div class="mb-3"> *@
@*                         <label>Kolon Adı</label> *@
@*                         <input type="text" class="form-control" name="name" required /> *@
@*                     </div> *@
@*                     <div class="mb-3"> *@
@*                         <label>Renk Seç</label> *@
@*                         <input type="color" class="form-control form-control-color" name="colorHex" value="#CCCCCC" /> *@
@*                     </div> *@
@*                 </div> *@
@*                 <div class="modal-footer"> *@
@*                     <button type="submit" class="btn btn-primary">Ekle</button> *@
@*                 </div> *@
@*             </div> *@
@*         </form> *@
@*     </div> *@
@* </div> *@


<div class="modal fade" id="addProcessModal" tabindex="-1" aria-labelledby="addProcessLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProcessLabel">Yeni İşlem Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                <input type="hidden" id="selectedProjectId" value="@ViewBag.ProjectId" />
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("_AddProcessPartial", new PTP.UI.Models.ProcessAddViewModel())
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveProcessBtn">Kaydet</button>
            </div>
        </div>
    </div>
</div>



<script>
    let kanban = null;


    //Kanban sayfası
    $(document).ready(function () {
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('id');

        if (!projectId) {
            alert("Geçerli bir proje ID'si bulunamadı.");
            return;
        }

        // Modal açıldığında proje ID'sini gizli inputa yaz
        $('#addStageModal').on('show.bs.modal', function () {
            $('#stageProjectId').val(projectId);
        });

        // Kanban panosunu yükle

        let processes = [];
        let stages = [];

        $.get(`/Admin/GetAllByProjectId/${projectId}`, function (data) {
            processes = data.processes || [];
            stages = data.stages || [];

            if (kanban !== null) {
                document.getElementById('kanbanBoard').innerHTML = '';
                kanban = null;
            }

                const boards = stages.map(stage => {
                    const stageName = stage.name;
                    const stageId = stage.id;
                    const boardId = sanitizeId(stage.name);
                    return {
                        id: boardId,
                        title: `
                            <div class="d-flex justify-content-between align-items-center">
                                <span>${stageName}</span>
                                <div class="dropdown float-end">
                                    <button class="btn btn-sm btn-light btn-dot" type="button" data-bs-toggle="dropdown">
                                        ⋯
                                    </button>
                                    <ul class="dropdown-menu" style="left: auto; right: 0;">
                                         <li><a class="dropdown-item add-task-btn" asp-action="AddProcess" data-stageid="${stageId}" data-stagename="${stageName}">➕ Yeni İşlem</a></li>
                                        <li><a class="dropdown-item text-danger delete-board-btn" href="#" data-stageid="${stageId}" data-boardid="${boardId}">❌ Sil</a></li>
                                    </ul>
                                </div>
                            </div>
                        `,
                        class: '',
                        item: [],
                        stageId: stageId
                    };
                });


             for (const p of processes) {
                const boardId = sanitizeId(p.processType);
                const board = boards.find(b => b.id === boardId);
                if (board) {
                    board.item.push({
                        id: 'process-' + p.id,
                        title: getCardHTML(p)
                    });
                }
            }

            kanban = new jKanban({
                element: '#kanbanBoard',
                boards: boards,
                dragEl: el => el.classList.add("dragging"),
                dragendEl: el => el.classList.remove("dragging"),
                dropEl: handleDrop,
                
            });

             $(function () {
                $("#kanbanBoard").sortable({
                    items: '.kanban-board',
                    handle: '.kanban-board-header',
                    update: function (event, ui) {
                        const newOrder = [];

                        $('#kanbanBoard .kanban-board').each(function (index) {
                            const stageId = $(this).data('stageid');
                            if (stageId) {
                                newOrder.push({ id: stageId, order: index });
                            }
                        });

                        // Gönder veritabanına
                        $.ajax({
                            url: '/Admin/UpdateStageOrders',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(newOrder),
                            success: () => console.log("Sıralama güncellendi"),
                            error: () => alert("Sıralama güncellenemedi")
                        });
                    }
                });
            });

            setTimeout(() => {
                $('#kanbanBoard .kanban-board').each(function (index) {
                    const boardId = $(this).attr('data-id');
                    const stage = stages.find(s => sanitizeId(s.name) === boardId);
                    if (stage) {
                        $(this).attr('data-stageid', stage.id); // ✅
                    }
                });
            }, 100);

            setTimeout(() => {
                stages.forEach(stage => {
                    const boardId = sanitizeId(stage.name);
                    const boardElement = document.querySelector(`[data-id="${boardId}"] .kanban-board-header`);
                    const mainElement = document.querySelector(`[data-id="${boardId}"] .kanban-drag`);
                    if (boardElement) {
                        // Rengi stil üzerinden uygula
                        boardElement.style.setProperty('background-color', stage.colorHex);
                        boardElement.style.setProperty('color', '#fff'); // Yazıyı beyaz yap
                    }

                    if (mainElement) {
                        // Kanban panelinin ana kısmına arka plan rengini uygula
                        const lightColor = lightenColor(stage.colorHex, 0.7);
                        mainElement.style.setProperty('background-color', lightColor);

                    }
                });
            }, 100);

            
        });

       

        //Kolon Silme
        $(document).on('click', '.delete-board-btn', function (e) {
            e.preventDefault();
            const stageId = $(this).data('stageid'); //veritabanındaki ID
            const boardId = $(this).data('boardid'); //UI'deki ID

                kanban.removeBoard(boardId);

                $.ajax({
                    url: '/Admin/DeleteStage',
                    type: 'POST',
                    data: JSON.stringify({ id: stageId }),
                    contentType: 'application/json',
                    success: () => console.log("Silme başarılı"),
                    error: () => alert("Silme hatası")
                });
        });

        //Kolon renk açma
        function lightenColor(hex, percent) {
        // HEX başındaki # işaretini kaldır
            hex = hex.replace(/^#/, '');

            // Renk 3 haneliyse 6 haneye çevir (#abc → #aabbcc)
            if (hex.length === 3) {
                hex = hex.split('').map(c => c + c).join('');
            }

            // RGB bileşenlerine ayır
            const r = parseInt(hex.substring(0, 2), 16);
            const g = parseInt(hex.substring(2, 4), 16);
            const b = parseInt(hex.substring(4, 6), 16);

            // Renk değerlerini belirtilen yüzde kadar aç
            const newR = Math.min(255, Math.floor(r + (255 - r) * percent));
            const newG = Math.min(255, Math.floor(g + (255 - g) * percent));
            const newB = Math.min(255, Math.floor(b + (255 - b) * percent));

            // Yeni rengi HEX olarak geri döndür
            return '#' + [newR, newG, newB].map(x => x.toString(16).padStart(2, '0')).join('');
        }

         //Kolon renk açma

        window.getCardHTML =  function(p) {
                return `
                    <div class="kanban-card-content" data-eid="${p.id}">
                        <div class="d-flex justify-content-between">
                            <small class="text-muted">24/7/20</small>
                            <span class="badge" style="background-color:${p.colorHex || '#6c757d'}; color: white;">${p.processType}</span>
                        </div>
                        <h6 class="mt-2 mb-1">${p.title}</h6>
                        <small class="text-muted">${p.description || 'Açıklama yok'}</small>
                        <div class="mt-2 d-flex justify-content-between align-items-center">
                            <div class="icons text-muted">💬 2 &nbsp; 📎 1 &nbsp; 👁️ 4</div>
                            <div>+5</div>
                        </div>
                    </div>
                `;
         }


        function handleDrop(el, target) {
            const id = parseInt(el.querySelector('[data-eid]').dataset.eid);
            const boardId = target.closest('.kanban-board').getAttribute('data-id');
            const newType = boardId.replace(/^_/, ''); 

            const stage = stages.find(s => sanitizeId(s.name) === boardId);

            const badge = el.querySelector('.badge');

            if (stage && badge) {
                badge.textContent = stage.name;
                badge.style.backgroundColor = stage.colorHex;
                badge.style.color = 'white';
            }

            $.ajax({
                url: '/Admin/UpdateType',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ id: id, newProcessStageId: stage.id }),
                error: () => alert("Güncellenirken hata oluştu")
            });
        }

       

        


        function capitalize(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }
    });


        //Kolon ekleme bitiş

     $(document).on('click', '.add-task-btn', function () {
        const stageId = $(this).data('stageid');
        const stageName = $(this).data('stagename');
        const projectId = $('#selectedProjectId').val(); // Modal içindeki hidden input'tan al

        $.get(`/Admin/AddProcess`, { projectId: projectId }, function (partialViewHtml) {
            // SADECE modal-body içeriğini değiştir
            $('#addProcessModal .modal-body').html(partialViewHtml);

            // Stage bilgilerini doldur
            $('#processStageId').val(stageId);
            $('#processTypeLabel').text(stageName);

            // Modalı göster
            $('#addProcessModal').modal('show');

            

        });

        document.querySelectorAll('.activity-item')[0].click()
    });


     window.sanitizeId =function (str) {
        if (!str) return '';
        return '_' + str.toLowerCase().replace(/\s+/g, '');
    }


</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const activityItems = document.querySelectorAll(".activity-item");
        let selectedActivity = "";

        activityItems.forEach(item => {
            item.addEventListener("click", function () {
                // Diğerlerinden 'selected' stilini kaldır
                activityItems.forEach(el => el.classList.remove("selected-activity"));

                // Tıklanan öğeye 'selected' sınıfını ekle
                this.classList.add("selected-activity");

                // Seçilen değeri kaydet
                selectedActivity = this.textContent.trim();

            });
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const tabs = document.querySelectorAll(".activity-item");
        const content = document.getElementById("activityContent");

        const dummyData = {
            "Tümü": [
                "Betül Durum değiştirdi → IN PROGRESS",
                "Betül Yorum yaptı → Harika!",
                "Betül Durum değiştirdi → TEST SÜRECİ"
            ],
            "Yorumlar": [
                "Betül: Bu iş biraz daha bekleyebilir.",
                "Betül: Öncelik sırasına göre alalım."
            ],
            "Geçmiş": [
                "Durum: TO DO → IN PROGRESS",
                "Durum: IN PROGRESS → TEST SÜRECİ",
                "Durum: TEST SÜRECİ → DONE"
            ],
            "Çalışma kaydı": [
                "1 saat çalışıldı",
                "Yarım saat toplantı yapıldı"
            ]
        };

        function renderContent(tab) {
            content.innerHTML = "";
            dummyData[tab].forEach(item => {
                const div = document.createElement("div");
                div.className = "activity-entry";
                div.textContent = item;
                content.appendChild(div);
            });
        }

        tabs.forEach(tab => {
            tab.addEventListener("click", () => {
                tabs.forEach(t => t.classList.remove("selected-activity"));
                tab.classList.add("selected-activity");
                renderContent(tab.textContent.trim());
            });
        });

        // Başlangıçta tümü göster
        renderContent("Tümü");
    });
</script>

@* Modal Dosya Ekleme alanı *@
<script>
    const dropArea = document.getElementById('fileDropArea');
    const fileInput = document.getElementById('processFiles');
    const fileList = document.getElementById('fileList');
    let selectedFiles = [];

    function updateFileList() {
        fileList.innerHTML = '';
        selectedFiles.forEach((file, index) => {
            const listItem = document.createElement('li');
            listItem.classList.add('d-flex', 'justify-content-between', 'align-items-center');

            const link = document.createElement('a');
            link.textContent = file.name;
            link.href = URL.createObjectURL(file);
            link.target = '_blank';

            const removeBtn = document.createElement('button');
            removeBtn.innerHTML = '❌';
            removeBtn.classList.add('btn', 'btn-sm', 'btn-link', 'text-danger', 'p-0', 'ms-2');
            removeBtn.title = "Kaldır";
            removeBtn.onclick = function () {
                selectedFiles.splice(index, 1);
                updateFileList();
            };

            listItem.appendChild(link);
            listItem.appendChild(removeBtn);
            fileList.appendChild(listItem);
        });
    }


    fileInput.addEventListener('change', () => {
        selectedFiles = Array.from(fileInput.files);
        updateFileList();
    });

    dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.classList.add('dragover');
    });

    dropArea.addEventListener('dragleave', () => {
        dropArea.classList.remove('dragover');
    });

    dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.classList.remove('dragover');

        const droppedFiles = Array.from(e.dataTransfer.files);
        selectedFiles = selectedFiles.concat(droppedFiles);

        // Unique dosya isimleri filtrelenebilir istersen
        updateFileList();
    });
</script>

<script>
    $(document).on('click', '#saveProcessBtn', function () {
        var form = $('#addProcessForm')[0];
        var formData = new FormData(form);

        $.ajax({
            url: '/Admin/AddProcess',
            method: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                $('#addProcessModal').modal('hide');

                const boardId = sanitizeId(result.processType || '');


                // Yeni kart objesi
                const newCard = {
                    id: 'process-' + result.id,
                    title: getCardHTML({
                        id: result.id,
                        title: result.title,
                        description: result.description,
                        processType: result.processType,
                        colorHex: result.colorHex
                    })
                };

                // Panoya yeni işlemi ekle
                kanban.addElement(boardId, newCard);

                if (kanban && typeof kanban.addElement === 'function') {
                    kanban.addElement(boardId, newCard);
                    console.log('Yeni kart eklendi.');
                } else {
                    console.error('Kanban objesi yok veya addElement fonksiyonu bulunamadı!');
                }

                // (İsteğe bağlı) Formu temizle
                form.reset();
            },
            error: function (err) {
                alert('İşlem başarısız.');
                console.error(err);
            }
        });
    });
</script>

