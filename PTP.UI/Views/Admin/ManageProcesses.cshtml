
@{
    ViewData["Title"] = "ManageProcesses";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.css" rel="stylesheet">
<script src="https://unpkg.com/jkanban@1.3.1/dist/jkanban.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<div class="container mt-4">
    <select id="projectSelect" class="form-select mb-3">
        <option selected disabled>Bir proje seçin...</option>
    </select>
    <button class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#addProcessModal">
        + Yeni İşlem Ekle
    </button>

    <div id="kanbanBoard"></div>
</div>

<div class="modal fade" id="addProcessModal" tabindex="-1" aria-labelledby="addProcessLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProcessLabel">Yeni İşlem Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                <input type="hidden" id="selectedProjectId" value="@ViewBag.ProjectId" />

            </div>
            <div class="modal-body">
                <form id="addProcessForm">
                    <div class="mb-3">
                        <label for="processTitle" class="form-label">Başlık</label>
                        <input type="text" class="form-control" id="processTitle" required />
                    </div>
                    <div class="mb-3">
                        <label for="processDescription" class="form-label">Açıklama</label>
                        <textarea class="form-control" id="processDescription"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="assignedUserId" class="form-label">Atanacak Personel</label>
                        <select class="form-select" id="assignedUserId" required>
                            <option value="" disabled selected>Personel seçin...</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="processType" class="form-label">Durum</label>
                        <select class="form-select" id="processType" required>
                            <option value="ToDo">To Do</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Done">Done</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveProcessBtn">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<script>
    let kanban = null;

    $(document).ready(function () {
        const projectId = $('#selectedProjectId').val();

        $.get('/Admin/GetAllProjects', function (data) {

            data.forEach(function (project) {
                $('#projectSelect').append(`<option value="${project.id}">${project.name}</option>`);
            });

            if (projectId) {
            $('#projectSelect').val(projectId).trigger('change');
        }

            loadUsers();

        });

        $('#projectSelect').change(function () {
            const projectId = $(this).val();
            console.log("Seçilen proje ID:", projectId);

            $.get(`/Admin/GetAllByProjectId/${projectId}`, function (processes) {
                processes = processes || [];
                if (kanban !== null) {
                    document.getElementById('kanbanBoard').innerHTML = ''; 
                }

                kanban = new jKanban({
                    element: '#kanbanBoard',
                    boards: [
                        {
                            id: '_todo',
                            title: 'To Do',
                            class: 'bg-light',
                            item: processes.filter(p => p.processType === 'ToDo').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        },
                        {
                            id: '_inprogress',
                            title: 'In Progress',
                            class: 'bg-warning',
                            item: processes.filter(p => p.processType === 'InProgress').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        },
                        {
                            id: '_done',
                            title: 'Done',
                            class: 'bg-success',
                            item: processes.filter(p => p.processType === 'Done').map(p => ({
                                id: 'process-' + p.id,
                                title: getCardHTML(p)
                            }))
                        }
                    ],
                    dragEl: function (el, source) {
                        el.classList.add("dragging");
                    },
                    dragendEl: function (el) {
                        el.classList.remove("dragging");
                    },
                    dropEl: function (el, target, source, sibling) {
                        const id = parseInt(el.querySelector('[data-eid]').dataset.eid);
                        const boardId = target.closest('.kanban-board').getAttribute('data-id');
                        const newType = getColumnType(boardId);

                        const badge = el.querySelector('.badge');
                        badge.textContent = newType;

                        badge.className = 'badge';
                        if (newType === 'ToDo') badge.classList.add('bg-secondary');
                        else if (newType === 'InProgress') badge.classList.add('bg-warning');
                        else if (newType === 'Done') badge.classList.add('bg-success');

                        $.ajax({
                            url: '/Admin/UpdateType',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ id: id, newType: newType }),
                            success: function () {
                            },
                            error: function () {
                                alert("Güncellenirken hata oluştu");
                            }
                        });
                    },
                    afterRender: function () {
                        document.querySelectorAll('.kanban-board').forEach(board => {
                            const title = board.querySelector('.kanban-title-board')?.innerText.trim();
                            let dataId = '';
                            if (title?.includes('To Do')) dataId = '_todo';
                            else if (title?.includes('In Progress')) dataId = '_inprogress';
                            else if (title?.includes('Done')) dataId = '_done';

                            board.setAttribute('data-id', dataId);
                            });
                        }
                });
            });
        });

        function getColumnType(boardId) {
            switch (boardId) {
                case '_todo': return 'ToDo';
                case '_inprogress': return 'InProgress';
                case '_done': return 'Done';
                default: return 'ToDo';
            }
        }

            function getBadgeClass(processType) {
        switch (processType) {
            case 'ToDo': return 'bg-secondary';
            case 'InProgress': return 'bg-warning';
            case 'Done': return 'bg-success';
            default: return 'bg-secondary';
        }
    }

        function getCardHTML(p) {
            return `
               <div class="kanban-card-content" data-eid="${p.id}">
            <div class="d-flex justify-content-between">
                <small class="text-muted">24/7/20</small>
                <span class="badge ${getBadgeClass(p.processType)}">${p.processType}</span>
            </div>
            <h6 class="mt-2 mb-1">${p.title}</h6>
            <small class="text-muted">${p.description || 'Açıklama yok'}</small>
            <div class="mt-2 d-flex justify-content-between align-items-center">
                <div class="icons text-muted">
                    💬 2 &nbsp; 📎 1 &nbsp; 👁️ 4
                </div>
                <div>+5</div>
            </div>
        </div>`;
        }
    });

        $('#saveProcessBtn').click(function () {
        const process = {
            projectId: $('#projectSelect').val(),
            title: $('#processTitle').val(),
            description: $('#processDescription').val(),
            processType: $('#processType').val(),
            assignedUserId: $('#assignedUserId').val()
        };

        $.ajax({
            url: '/Admin/AddProcess',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(process),
            success: function () {
                $('#addProcessModal').modal('hide');
                $('#addProcessForm')[0].reset();
                $('#projectSelect').trigger('change');
            },
            error: function () {
                alert('İşlem eklenirken hata oluştu.');
            }
        });
    });

        function loadUsers() {
        $.get('/Admin/GetAllPersonnel', function (users) {
            $('#assignedUserId').empty().append(`<option value="" disabled selected>Personel seçin...</option>`);
            users.forEach(function (u) {
                $('#assignedUserId').append(`<option value="${u.id}">${u.fullName}</option>`);
            });
        });
    }

</script>
