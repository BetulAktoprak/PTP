@using Newtonsoft.Json
@model PTP.UI.Models.ProjectCreateViewModel
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var personnelJson = JsonConvert.SerializeObject(ViewBag.PersonnelListJson);
}

<style>
    #mainPreviewContainer embed,
    #mainPreviewContainer img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    #mainPreview {
        width: 100%;
        height: 300px;
        object-fit: contain;
        background-color: #f8f9fa;
        border: 1px solid #2e2929;
        padding: 5px;
    }

    #mainPreviewContainer {
        width: 100%;
        height: 300px;
        object-fit: contain;
        border: 1px solid #555;
        padding: 5px;
    }

    #fileThumbnails img {
        width: 70px;
        height: 70px;
        object-fit: cover;
        border: 1px solid #2e2929;
        padding: 3px;
        border-radius: 6px;
        transition: 0.2s ease;
    }

        #fileThumbnails img:hover {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .text-center small {
        font-size: 11px;
        color: #666;
    }

    .card-header {
        font-size: 1.1rem;
        letter-spacing: 0.5px;
    }

    .list-group-item {
        border: none;
        padding: 0.4rem 0.2rem;
    }

        .list-group-item:not(:last-child) {
            border-bottom: 1px solid #dee2e6;
        }

        .list-group-item i {
            width: 20px;
            text-align: center;
            transition: all 0.6s ease;
            position: relative;
            z-index: 10;
        }

    .hover-bg {
        transition: all 0.6s ease;
    }

        .hover-bg:hover {
            background-color: #006666;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            transform: scale(1.1);
        }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                </div>
                <div class="card-body">
                    <div class="row g-xl-5 g-3">

                        @await Html.PartialAsync("_SidebarPartial")

                        <div class="col-xxl-9 col-xl-8 box-col-8 position-relative">
                        <form id="projectForm" asp-action="Create" method="post" enctype="multipart/form-data" class="row g-2">
                            <div class="tab-content" id="add-product-pills-tabContent">

                                @await Html.PartialAsync("_ProjectTitlePartial")

                                @* @await Html.PartialAsync("_ProjectFilesPartial") *@
                                    <div class="tab-pane fade" id="gallery-product" role="tabpanel" aria-labelledby="gallery-product-tab">
                                        <div class="sidebar-body">
                                            <div class="mb-3">
                                                <label for="projectFiles" class="form-label fw-bold">
                                                    <i class="fa fa-cloud-upload-alt me-2"></i> Proje Dosyaları
                                                </label>
                                                <input type="file" id="projectFiles" name="ProjectFiles" class="form-control" multiple />
                                                <input type="hidden" name="DocumentDescriptionsJson" id="DocumentDescriptionsJson" />


                                            </div>

                                            <div id="selectedFiles" class="mt-3"></div>
                                        </div>
                                    </div>

                                @* @await Html.PartialAsync("_ProjectPersonnelsPartial") *@
                                    <div class="tab-pane fade" id="category-product" role="tabpanel" aria-labelledby="category-product-tab">
                                        <div class="sidebar-body">
                                            <div class="row g-lg-4 g-3">
                                                <div class="col-12">
                                                    <div class="row g-5">
                                                        <div class="col-12">
                                                            <label class="form-label fw-bold">Personel Yetkileri</label>
                                                            <div class="mb-3">
                                                                <input type="text" id="personnelSearch" class="form-control" placeholder="Personel ara...">
                                                            </div>

                                                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                                                <table class="table table-bordered align-middle text-center mb-0">
                                                                    <thead class="table-light sticky-top">
                                                                        <tr>
                                                                            <th>Personel</th>
                                                                            <th>Okuma</th>
                                                                            <th>Oluşturma</th>
                                                                            <th>Güncelleme</th>
                                                                            <th>Silme</th>
                                                                            <th>Yorum</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody id="personnelTableBody">
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                        <input type="hidden" name="SelectedPersonnelJson" id="SelectedPersonnelJson" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    

                                <div class="tab-pane fade" id="pricings" role="tabpanel" aria-labelledby="pricings-tab">
                                    <div class="sidebar-body">
                                            @await Html.PartialAsync("_ProjectDetailsPartial")
                                            <hr style="margin-top:80px" />
                                            <div class="mt-4 d-flex justify-content-end">
                                                <button id="btnPreview" type="button" class="btn btn-outline-primary d-flex align-items-center gap-1">
                                                    Kaydet <i class="icofont icofont-circled-right fs-5"></i>
                                                </button>
                                            </div>

                                    </div>
                                </div>
                                
                            </div>
                        </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* @await Html.PartialAsync("_ConfirmModalPartial") *@

<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Önizleme</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>

            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div id="mainPreviewContainer"
                                 style="height: 300px;"
                                 class="border rounded p-2 mb-3 d-flex justify-content-center align-items-center">
                            </div>

                            <div class="d-flex flex-wrap gap-2 overflow-auto" id="fileThumbnails"></div>

                            <hr />

                            <ul id="modalDocumentList" class="ps-3 small"></ul>

                        </div>

                        <div class="col-md-6">
                            <div class="card shadow-sm border-0">
                                <div class="card-header bg-primary text-white fw-bold">
                                    <i class="fa fa-info-circle me-2"></i>
                                    <span class="d-inline">Proje Adı: <strong id="previewProjectName" class="text-white fw-bold"></strong></span>
                                </div>

                                <div class="card-body p-3">
                                    <ul class="list-group small">
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-user me-2 text-secondary"></i>
                                            <strong>Kullanıcı Adı:</strong> <span id="modalClientName"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-align-left me-2 text-secondary"></i>
                                            <strong>Açıklama:</strong> <span id="modalDetails"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-users me-2 text-secondary"></i>
                                            <strong>Personeller:</strong> <span id="modalPersonnelList"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-percentage me-2 text-secondary"></i>
                                            <strong>Rate:</strong> <span id="modalRate"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-tag me-2 text-secondary"></i>
                                            <strong>Tip:</strong> <span id="modalType"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-flag me-2 text-secondary"></i>
                                            <strong>Öncelik:</strong> <span id="modalPriority"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-expand-arrows-alt me-2 text-secondary"></i>
                                            <strong>Boyut:</strong> <span id="modalSize"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-play me-2 text-secondary"></i>
                                            <strong>Başlangıç:</strong> <span id="modalStart"></span>
                                        </li>
                                        <li class="list-group-item hover-bg">
                                            <i class="fa fa-stop me-2 text-secondary"></i>
                                            <strong>Bitiş:</strong> <span id="modalEnd"></span>
                                        </li>
                                    </ul>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Vazgeç</button>
                <button type="submit" class="btn btn-success" id="btnConfirmSave">Kaydet</button>
            </div>
        </div>
    </div>
</div>


<script>
    const personnelList = @Html.Raw(personnelJson);

    const tbody = document.getElementById("personnelTableBody");

    personnelList.forEach(p => {
        const row = document.createElement("tr");

        row.innerHTML = `
            <td class="text-start">${p.name}<input type="hidden" class="personnel-id" value="${p.value}" /></td>
            <td><input type="checkbox" class="form-check-input can-read" /></td>
            <td><input type="checkbox" class="form-check-input can-create" /></td>
            <td><input type="checkbox" class="form-check-input can-update" /></td>
            <td><input type="checkbox" class="form-check-input can-delete" /></td>
            <td><input type="checkbox" class="form-check-input can-comment" /></td>
        `;

        tbody.appendChild(row);
    });

   
</script>

<script>
    document.getElementById("personnelSearch").addEventListener("keyup", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#personnelTableBody tr");

        rows.forEach(row => {
            const nameCell = row.querySelector("td:first-child");
            const name = nameCell.textContent.toLowerCase();
            row.style.display = name.includes(searchValue) ? "" : "none";
        });
    });
</script>


<script>
    let selectedFiles = [];
     document.getElementById('projectFiles').addEventListener('change', function () {
            const newFiles = Array.from(this.files);
            newFiles.forEach(file => {
                if (!selectedFiles.some(f => f.file.name === file.name && f.file.size === file.size)) {
                    selectedFiles.push({ file: file, description: "" });
                }
            });
            renderSelectedFiles();
            this.value = ""; 
     });

        window.updateDescription = function (index, value) {
            selectedFiles[index].description = value;
        }

        function renderSelectedFiles() {
            const fileListContainer = document.getElementById('selectedFiles');
            fileListContainer.innerHTML = '';
            selectedFiles.forEach((item, index) => {
                const fileDiv = document.createElement('div');
                fileDiv.classList.add('mb-2');
                fileDiv.innerHTML = `
                    <div class="card p-2">
                        <p class="mb-1 fw-semibold">Dosya: ${item.file.name}</p>
                        <label>Açıklama</label>
                        <input type="text" class="form-control" placeholder="Belge açıklaması girin"
                            value="${item.description}"
                            oninput="updateDescription(${index}, this.value)" />
                    </div>`;
                fileListContainer.appendChild(fileDiv);
            });
        }

    function showPreview(file) {
        const reader = new FileReader();
        const container = document.getElementById("mainPreviewContainer");
        container.innerHTML = "";

        const fileName = file.name.toLowerCase();

        reader.onload = function (e) {
            if (fileName.endsWith(".pdf")) {
                const embed = document.createElement("embed");
                embed.src = e.target.result;
                embed.type = "application/pdf";
                embed.style.width = "100%";
                embed.style.height = "100%";
                container.appendChild(embed);
            } else if (file.type.startsWith("image/")) {
                const img = document.createElement("img");
                img.src = e.target.result;
                img.alt = file.name;
                img.style.maxWidth = "100%";
                img.style.maxHeight = "100%";
                img.style.objectFit = "contain";
                container.appendChild(img);
             } else if (file.type === "text/plain") {
                const textPreview = document.createElement("pre");
                textPreview.textContent = e.target.result;
                textPreview.style.whiteSpace = "pre-wrap";
                textPreview.style.maxHeight = "100%";
                textPreview.style.overflowY = "auto";
                textPreview.style.width = "100%";
                textPreview.style.padding = "10px";
                textPreview.style.backgroundColor = "#d2d6d4";
                textPreview.style.border = "1px solid #dee2e6";
                textPreview.style.borderRadius = "4px";
                container.appendChild(textPreview);
            } else {
                container.textContent = "Bu dosya türü önizlenemiyor.";
            }
        };

        if (file.type === "text/plain") {
            reader.readAsText(file);
        } else {
            reader.readAsDataURL(file);
        }
    }

    document.getElementById("btnPreview").addEventListener("click", function (event) {
        const projectName = document.getElementById("productTitle1").value;
        document.getElementById("previewProjectName").textContent = projectName;
        document.getElementById("modalClientName").textContent = document.querySelector('[name="ClientName"]').value;
        document.getElementById("modalDetails").textContent = document.querySelector('[name="Details"]').value;
        const modalDocumentList = document.getElementById("modalDocumentList");
        modalDocumentList.innerHTML = "";

        selectedFiles.forEach((item, index) => {
            const li = document.createElement("li");
            li.textContent = `${item.file.name} ➜ ${item.description || "Açıklama yok"}`;
            modalDocumentList.appendChild(li);
        });

        document.getElementById("modalRate").textContent = document.querySelector('[name="ProjectRate"]').value;
        document.getElementById("modalType").textContent = document.querySelector('[name="ProjectType"]').value;
        document.getElementById("modalPriority").textContent = document.querySelector('[name="Priority"]').value;
        document.getElementById("modalSize").textContent = document.querySelector('[name="ProjectSize"]').value;
        document.getElementById("modalStart").textContent = document.querySelector('[name="StartingDate"]').value;
        document.getElementById("modalEnd").textContent = document.querySelector('[name="EndingDate"]').value;

        const personnelInput = document.querySelector('#SelectedPersonnelJson');
        let personnelListText = "";

        try {
            const selected = JSON.parse(personnelInput.value);
            personnelListText = selected.map(p => p.name || p.value).join(", ");
        } catch {
            personnelListText = personnelInput.value;
        }

        document.getElementById("modalPersonnelList").textContent = personnelListText;

        const thumbnailsContainer = document.getElementById("fileThumbnails");
        thumbnailsContainer.innerHTML = "";

        if (selectedFiles && selectedFiles.length > 0 && selectedFiles[0]) {
            showPreview(selectedFiles[0].file);
        }

        selectedFiles.forEach((item, index) => {
            const file = item.file;
            const reader = new FileReader();
            reader.onload = function (e) {
                const wrapper = document.createElement("div");
                wrapper.className = "text-center";
                wrapper.style.width = "75px";

                const img = document.createElement("img");
                if (file.type.startsWith("image/")) {
                    img.src = e.target.result;
                } else if (file.name.toLowerCase().endsWith(".pdf")) {
                    img.src = "../dashboard/assets/images/pdf-icon.png";
                } else {
                    img.src = "../dashboard/assets/images/file-icon.png";
                }

                img.alt = file.name;
                img.className = "rounded border p-1";
                img.style.width = "70px";
                img.style.height = "70px";
                img.style.objectFit = "cover";
                img.style.cursor = "pointer";
                img.title = file.name;

                img.addEventListener("click", () => {
                    showPreview(file);
                });

                const caption = document.createElement("div");
                caption.className = "small text-muted mt-1";
                caption.style.fontSize = "11px";
                caption.textContent = file.name.length > 15 ? file.name.slice(0, 12) + "..." : file.name;


                wrapper.appendChild(img);
                wrapper.appendChild(caption);
                thumbnailsContainer.appendChild(wrapper);
                };

            reader.readAsDataURL(file);
        });

        const modal = new bootstrap.Modal(document.getElementById("confirmModal"));
        modal.show();
    });

    function prepareSelectedPersonnelJson(){
        const rows = document.querySelectorAll("#personnelTableBody tr");
        const selectedPersonnel = [];

        rows.forEach(row => {
            const id = row.querySelector(".personnel-id").value;
            const canRead = row.querySelector(".can-read").checked;
            const canCreate = row.querySelector(".can-create").checked;
            const canUpdate = row.querySelector(".can-update").checked;
            const canDelete = row.querySelector(".can-delete").checked;
            const canComment = row.querySelector(".can-comment").checked;

            if (canRead || canCreate || canUpdate || canDelete || canComment) {
                selectedPersonnel.push({
                    PersonnelId: parseInt(id),
                    CanRead: canRead,
                    CanCreate: canCreate,
                    CanUpdate: canUpdate,
                    CanDelete: canDelete,
                    CanComment: canComment
                });
            }
        });

        document.getElementById("SelectedPersonnelJson").value = JSON.stringify(selectedPersonnel);
    }

    document.getElementById("btnConfirmSave").addEventListener("click", function (e) {
            e.preventDefault();

            prepareSelectedPersonnelJson();

            const descriptions = selectedFiles.map(item => item.description || "");
        document.getElementById("DocumentDescriptionsJson").value = JSON.stringify(descriptions);
            const formElement = document.getElementById('projectForm');
                const formData = new FormData(formElement);

                selectedFiles.forEach((item, index) => {
                    formData.append(`ProjectFiles[${index}]`, item.file);
                    formData.append(`DocumentDescriptions[${index}]`, item.description);
                });


        fetch(formElement.action, { method: "POST", body: formData })
        .then(r => r.ok ? location.href = "/Project/Index"
                        : r.text().then(t => alert("Hata:\n" + t)));
    });
</script>