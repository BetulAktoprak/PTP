@using Newtonsoft.Json
@model PTP.UI.Models.ProjectCreateViewModel
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // var personnelJson = JsonConvert.SerializeObject(ViewBag.PersonnelListJson);
}

<style>
    #mainPreviewContainer embed,
    #mainPreviewContainer img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    #mainPreview {
        width: 100%;
        height: 300px;
        object-fit: contain;
        background-color: #f8f9fa;
        border: 1px solid #2e2929;
        padding: 5px;
    }

    #mainPreviewContainer {
        width: 100%;
        height: 300px;
        object-fit: contain;
        border: 1px solid #555;
        padding: 5px;
    }

    #fileThumbnails img {
        width: 70px;
        height: 70px;
        object-fit: cover;
        border: 1px solid #2e2929;
        padding: 3px;
        border-radius: 6px;
        transition: 0.2s ease;
    }

        #fileThumbnails img:hover {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .text-center small {
        font-size: 11px;
        color: #666;
    }

    .card-header {
        font-size: 1.1rem;
        letter-spacing: 0.5px;
    }

    .list-group-item {
        border: none;
        padding: 0.4rem 0.2rem;
    }

        .list-group-item:not(:last-child) {
            border-bottom: 1px solid #dee2e6;
        }

        .list-group-item i {
            width: 20px;
            text-align: center;
            transition: all 0.6s ease;
            position: relative;
            z-index: 10;
        }

    .hover-bg {
        transition: all 0.6s ease;
    }

        .hover-bg:hover {
            background-color: #006666;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            transform: scale(1.1);
        }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                </div>
                <div class="card-body">
                    <div class="row g-xl-5 g-3">

                        @await Html.PartialAsync("_SidebarPartial")

                        <div class="col-xxl-9 col-xl-8 box-col-8 position-relative">
                        <form id="projectForm" asp-action="Create" method="post" enctype="multipart/form-data" class="row g-2">
                            <div class="tab-content" id="add-product-pills-tabContent">

                                @await Html.PartialAsync("_ProjectTitlePartial")

                                @* @await Html.PartialAsync("_ProjectFilesPartial") *@
                                    <div class="tab-pane fade" id="gallery-product" role="tabpanel" aria-labelledby="gallery-product-tab">
                                        <div class="sidebar-body">
                                            <div class="row">
                                                <div class="col-md-7 mb-3">
                                                    <label for="projectFiles" class="form-label fw-bold mb-2">
                                                         Proje Dosyaları
                                                    </label>
                                                    <input type="file" id="projectFiles" name="ProjectFiles" class="form-control" multiple />
                                                    <input type="hidden" name="ProjectId" value="@Model.ProjectId" />
                                                    <input type="hidden" name="DocumentDescriptionsJson" id="DocumentDescriptionsJson" />
                                                    <div id="selectedFiles" class="mt-3"></div>
                                                </div>
                                               
                                                <div class="col-md-1 d-flex justify-content-center">
                                                    <div style="border-left: 1px solid #ccc; height: 100%;"></div>
                                                </div>
                                                <div class="col-md-4 mb-3">
                                                    <div class="form-group">
                                                        <label for="LogoFile" class="fw-bold">Proje Logosu</label>
                                                        <input type="file" class="form-control" name="LogoFile" id="LogoFile" accept="image/*" />

                                                        @if (!string.IsNullOrEmpty(Model.LogoPath))
                                                        {
                                                            <div class="mt-2">
                                                                <p>Mevcut Logo:</p>
                                                                <img src="/@Model.LogoPath" alt="Logo" style="max-height:100px;" />
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                @* @await Html.PartialAsync("_ProjectPersonnelsPartial") *@
                                    <div class="tab-pane fade" id="category-product" role="tabpanel" aria-labelledby="category-product-tab">
                                        <div class="sidebar-body">
                                            <div class="row g-lg-4 g-3">
                                                <div class="col-12">
                                                    <div class="row g-5">
                                                        <div class="col-12">
                                                            <label class="form-label fw-bold">Personel Yetkileri</label>
                                                            <div class="mb-3">
                                                                <input type="text" id="personnelSearch" class="form-control" placeholder="Personel ara...">
                                                            </div>

                                                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                                                <table class="table table-bordered align-middle text-center mb-0">
                                                                    <thead class="table-light sticky-top">
                                                                        <tr>
                                                                            <th>Personel</th>
                                                                            <th>Okuma</th>
                                                                            <th>Oluşturma</th>
                                                                            <th>Güncelleme</th>
                                                                            <th>Silme</th>
                                                                            <th>Yorum</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody id="personnelTableBody">
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                        <input type="hidden" name="SelectedPersonnelJson" id="SelectedPersonnelJson" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    

                                <div class="tab-pane fade" id="pricings" role="tabpanel" aria-labelledby="pricings-tab">
                                    <div class="sidebar-body">
                                            @await Html.PartialAsync("_ProjectDetailsPartial")
                                            <hr style="margin-top:80px" />
                                            <div class="mt-4 d-flex justify-content-end">
                                                <button id="btnPreview" type="button" class="btn btn-outline-primary d-flex align-items-center gap-1">
                                                    Kaydet <i class="icofont icofont-circled-right fs-5"></i>
                                                </button>
                                            </div>

                                    </div>
                                </div>
                                
                            </div>
                        </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* @await Html.PartialAsync("_ConfirmModalPartial") *@

@* <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true"> *@
@*     <div class="modal-dialog modal-xl modal-dialog-scrollable"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title" id="confirmModalLabel">Önizleme</h5> *@
@*                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button> *@
@*             </div> *@

@*             <div class="modal-body"> *@
@*                 <div class="container-fluid"> *@
@*                     <div class="row g-4"> *@
@*                         <div class="col-md-6"> *@
@*                             <div id="mainPreviewContainer" *@
@*                                  style="height: 300px;" *@
@*                                  class="border rounded p-2 mb-3 d-flex justify-content-center align-items-center"> *@
@*                             </div> *@

@*                             <div class="d-flex flex-wrap gap-2 overflow-auto" id="fileThumbnails"></div> *@

@*                             <hr /> *@

@*                             <ul id="modalDocumentList" class="ps-3 small"></ul> *@

@*                         </div> *@

@*                         <div class="col-md-6"> *@
@*                             <div class="card shadow-sm border-0"> *@
@*                                 <div class="card-header bg-primary text-white fw-bold"> *@
@*                                     <i class="fa fa-info-circle me-2"></i> *@
@*                                     <span class="d-inline">Proje Adı: <strong id="previewProjectName" class="text-white fw-bold"></strong></span> *@
@*                                 </div> *@

@*                                 <div class="card-body p-3"> *@
@*                                     <ul class="list-group small"> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-user me-2 text-secondary"></i> *@
@*                                             <strong>Kullanıcı Adı:</strong> <span id="modalClientName"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-align-left me-2 text-secondary"></i> *@
@*                                             <strong>Açıklama:</strong> <span id="modalDetails"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-users me-2 text-secondary"></i> *@
@*                                             <strong>Personeller:</strong> <span id="modalPersonnelList"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-percentage me-2 text-secondary"></i> *@
@*                                             <strong>Rate:</strong> <span id="modalRate"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-tag me-2 text-secondary"></i> *@
@*                                             <strong>Tip:</strong> <span id="modalType"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-flag me-2 text-secondary"></i> *@
@*                                             <strong>Öncelik:</strong> <span id="modalPriority"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-expand-arrows-alt me-2 text-secondary"></i> *@
@*                                             <strong>Boyut:</strong> <span id="modalSize"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-play me-2 text-secondary"></i> *@
@*                                             <strong>Başlangıç:</strong> <span id="modalStart"></span> *@
@*                                         </li> *@
@*                                         <li class="list-group-item hover-bg"> *@
@*                                             <i class="fa fa-stop me-2 text-secondary"></i> *@
@*                                             <strong>Bitiş:</strong> <span id="modalEnd"></span> *@
@*                                         </li> *@
@*                                     </ul> *@
@*                                 </div> *@
@*                             </div> *@


@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@

@*             <div class="modal-footer"> *@
@*                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Vazgeç</button> *@
@*                 <button type="submit" class="btn btn-success" id="btnConfirmSave">Kaydet</button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* Kolona İşlem Ekleme ve Silme *@
<script>

    const existingStages = @Html.Raw(JsonConvert.SerializeObject(Model.Stages ?? new List<ProcessStageViewModel>()));
    selectedPersonnel = @Html.Raw(JsonConvert.SerializeObject(ViewBag.SelectedPersonnel ?? new List<object>()));


    window.onload = function () {
        if (existingStages.length > 0) {
            existingStages.forEach((stage, index) => {
                addStage(stage.ProcessStageName, stage.ColorHex, stage.Order ?? index);
            });
        }

        if (selectedPersonnel.length > 0) {
            selectedPersonnel.forEach(p => {
                // burada senin personel alanını oluşturduğun yapıya göre checkbox'ları vs işaretlemen gerekir
                const checkbox = document.querySelector(`input[data-personel-id='${p.PersonnelId}'][data-permission='read']`);
                if (checkbox) checkbox.checked = p.CanRead;
                if (checkbox) checkbox.checked = p.CanCreate;
                if (checkbox) checkbox.checked = p.CanUpdate;
                if (checkbox) checkbox.checked = p.CanDelete;
                if (checkbox) checkbox.checked = p.CanComment;
                // diğer izinleri de aynı şekilde işaretleyebilirsin
            });
        }
    };

    let stageIndex = 0;

    function addStage(name = "", color = "#cccccc", order = 0) {
        const list = document.getElementById('stageList');

        const li = document.createElement('li');
        li.className = 'item mb-2 d-flex align-items-center';
        li.setAttribute('draggable', 'true');
        li.dataset.index = stageIndex;

        li.innerHTML = `
            <div class="cont d-flex align-items-center w-100">
                <input type="text" name="Stages[${stageIndex}].ProcessStageName" value="${name}" placeholder="Kolon adı" class="form-control w-50 me-2" />
                <input type="color" name="Stages[${stageIndex}].ColorHex" value="${color}" class="form-control-color me-2" />
                <input type="hidden" name="Stages[${stageIndex}].Order" class="stage-order" value="${stageIndex}" />
                <span class="text-danger" style="cursor: pointer;" onclick="removeStage(this)">&#10006;</span>
            </div>
        `;

        list.appendChild(li);
        stageIndex++;
        updateSortable(); // yeniden sıralamayı başlat
    }

    function removeStage(el) {
        const li = el.closest('li');
        li.remove();
        updateOrderInputs();
    }

    function updateOrderInputs() {
        const items = document.querySelectorAll('#stageList .item');
        items.forEach((item, i) => {
            const nameInput = item.querySelector('input[type="text"]');
            const colorInput = item.querySelector('input[type="color"]');
            const orderInput = item.querySelector('.stage-order');

            if (nameInput) nameInput.name = `Stages[${i}].ProcessStageName`;
            if (colorInput) colorInput.name = `Stages[${i}].ColorHex`;
            if (orderInput) {
                orderInput.name = `Stages[${i}].Order`;
                orderInput.value = i;
            }
        });
    }



    function updateSortable() {
        const list = document.getElementById('stageList');
        let dragSrcEl = null;

        list.querySelectorAll('.item').forEach(item => {
            item.addEventListener('dragstart', function (e) {
                dragSrcEl = this;
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', this.innerHTML);
                this.classList.add('dragging');
            });

            item.addEventListener('dragover', function (e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                return false;
            });

            item.addEventListener('drop', function (e) {
                e.stopPropagation();
                if (dragSrcEl !== this) {
                    const temp = this.innerHTML;
                    this.innerHTML = dragSrcEl.innerHTML;
                    dragSrcEl.innerHTML = temp;
                    updateOrderInputs(); // sıralamaları güncelle
                }
                return false;
            });

            item.addEventListener('dragend', function () {
                this.classList.remove('dragging');
            });
        });
    }
</script>


<script>
    // JSON dataları parse ederken güvenli şekilde tanımla
    const personnelList = @Html.Raw(JsonConvert.SerializeObject(ViewBag.PersonnelListJson ?? new List<PTP.UI.Models.PersonnelDto>()));

    let selectedPersonnel = [];

    try {
        selectedPersonnel = JSON.parse(@Html.Raw(JsonConvert.SerializeObject(ViewBag.SelectedPersonnel ?? "[]")));
    } catch (e) {
        selectedPersonnel = [];
    }



    const tbody = document.getElementById("personnelTableBody");

    personnelList.forEach(p => {
        const row = document.createElement("tr");

        // Daha önce atanmış personel varsa onun yetkilerini al
    

    const selected = selectedPersonnel.find(sp => sp.PersonnelId == parseInt(p.value));

        row.innerHTML = `
            <td class="text-start">${p.name}<input type="hidden" class="personnel-id" value="${p.value}" /></td>
            <td><input type="checkbox" class="form-check-input can-read" ${selected?.CanRead ? 'checked' : ''} /></td>
            <td><input type="checkbox" class="form-check-input can-create" ${selected?.CanCreate ? 'checked' : ''} /></td>
            <td><input type="checkbox" class="form-check-input can-update" ${selected?.CanUpdate ? 'checked' : ''} /></td>
            <td><input type="checkbox" class="form-check-input can-delete" ${selected?.CanDelete ? 'checked' : ''} /></td>
            <td><input type="checkbox" class="form-check-input can-comment" ${selected?.CanComment ? 'checked' : ''} /></td>
        `;

        tbody.appendChild(row);
    });
    // Hidden input'u da güncelle
    document.getElementById("SelectedPersonnelJson").value = JSON.stringify(selectedPersonnel);
       document.querySelectorAll('#personnelTableBody input[type=checkbox]').forEach(cb => {
        cb.removeEventListener('change', prepareSelectedPersonnelJson); // önce temizle
        cb.addEventListener('change', prepareSelectedPersonnelJson);
    });


</script>


<script>
    document.getElementById("personnelSearch").addEventListener("keyup", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("#personnelTableBody tr");

        rows.forEach(row => {
            const nameCell = row.querySelector("td:first-child");
            const name = nameCell.textContent.toLowerCase();
            row.style.display = name.includes(searchValue) ? "" : "none";
        });
    });
</script>



<script>
    let selectedFiles = [];

     document.getElementById('projectFiles').addEventListener('change', function () {
         const newFiles = Array.from(this.files);
                newFiles.forEach(file => {
                    if (!file || !file.name) return;
                    if (selectedFiles.some(f => f.fileName === file.name && !f.id)) return;
                   selectedFiles.push({
                    id: null,
                    fileName: file.name,
                    filePath: null,
                    documentDescriptions: "",
                    file: file
                });
        });
        renderSelectedFiles();
        this.value = "";
     });

     function updateDescription(index, value) {
        if (selectedFiles[index]) {
            selectedFiles[index].documentDescriptions = value;
        }
    }

    function removeFile(index) {
        selectedFiles.splice(index, 1);
        renderSelectedFiles();
    }
    function renderSelectedFiles() {
        const container = document.getElementById("selectedFiles");
        container.innerHTML = "";
        selectedFiles.forEach((item, index) => {
            container.innerHTML += `
                <div class="card p-2 mb-2 position-relative">
                    <span class="position-absolute top-0 end-0 text-danger fs-3" style="cursor:pointer;" onclick="removeFile(${index})">&times;</span>
                    <p><strong>${item.fileName}</strong></p>
                    <input type="text" class="form-control" value="${item.documentDescriptions || ""}" placeholder="Açıklama" oninput="updateDescription(${index}, this.value)" />
                </div>
            `;
        });
    }

    // function showPreview(file) {
    //     const reader = new FileReader();
    //     const container = document.getElementById("mainPreviewContainer");
    //     container.innerHTML = "";

    //     const fileName = file.name.toLowerCase();

    //     reader.onload = function (e) {
    //         if (fileName.endsWith(".pdf")) {
    //             const embed = document.createElement("embed");
    //             embed.src = e.target.result;
    //             embed.type = "application/pdf";
    //             embed.style.width = "100%";
    //             embed.style.height = "100%";
    //             container.appendChild(embed);
    //         } else if (file.type.startsWith("image/")) {
    //             const img = document.createElement("img");
    //             img.src = e.target.result;
    //             img.alt = file.name;
    //             img.style.maxWidth = "100%";
    //             img.style.maxHeight = "100%";
    //             img.style.objectFit = "contain";
    //             container.appendChild(img);
    //          } else if (file.type === "text/plain") {
    //             const textPreview = document.createElement("pre");
    //             textPreview.textContent = e.target.result;
    //             textPreview.style.whiteSpace = "pre-wrap";
    //             textPreview.style.maxHeight = "100%";
    //             textPreview.style.overflowY = "auto";
    //             textPreview.style.width = "100%";
    //             textPreview.style.padding = "10px";
    //             textPreview.style.backgroundColor = "#d2d6d4";
    //             textPreview.style.border = "1px solid #dee2e6";
    //             textPreview.style.borderRadius = "4px";
    //             container.appendChild(textPreview);
    //         } else {
    //             container.textContent = "Bu dosya türü önizlenemiyor.";
    //         }
    //     };

    //     if (file.type === "text/plain") {
    //         reader.readAsText(file);
    //     } else {
    //         reader.readAsDataURL(file);
    //     }
    // }

    // document.getElementById("btnPreview").addEventListener("click", function (event) {
    //     const projectName = document.getElementById("productTitle1").value;
    //     document.getElementById("previewProjectName").textContent = projectName;
    //     document.getElementById("modalClientName").textContent = document.querySelector('[name="ClientName"]').value;
    //     document.getElementById("modalDetails").textContent = document.querySelector('[name="Details"]').value;
    //     const modalDocumentList = document.getElementById("modalDocumentList");
    //     modalDocumentList.innerHTML = "";

    //     selectedFiles.forEach((item, index) => {
    //         const li = document.createElement("li");
    //         li.textContent = `${item.file.name} ➜ ${item.description || "Açıklama yok"}`;
    //         modalDocumentList.appendChild(li);
    //     });

    //     document.getElementById("modalRate").textContent = document.querySelector('[name="ProjectRate"]').value;
    //     document.getElementById("modalType").textContent = document.querySelector('[name="ProjectType"]').value;
    //     document.getElementById("modalPriority").textContent = document.querySelector('[name="Priority"]').value;
    //     document.getElementById("modalSize").textContent = document.querySelector('[name="ProjectSize"]').value;
    //     document.getElementById("modalStart").textContent = document.querySelector('[name="StartingDate"]').value;
    //     document.getElementById("modalEnd").textContent = document.querySelector('[name="EndingDate"]').value;

    //     const personnelInput = document.querySelector('#SelectedPersonnelJson');
    //     let personnelListText = "";

    //     try {
    //         const selected = JSON.parse(personnelInput.value);
    //         personnelListText = selected.map(p => p.name || p.value).join(", ");
    //     } catch {
    //         personnelListText = personnelInput.value;
    //     }

    //     document.getElementById("modalPersonnelList").textContent = personnelListText;

    //     const thumbnailsContainer = document.getElementById("fileThumbnails");
    //     thumbnailsContainer.innerHTML = "";

    //     if (selectedFiles && selectedFiles.length > 0 && selectedFiles[0]) {
    //         showPreview(selectedFiles[0].file);
    //     }

    //     selectedFiles.forEach((item, index) => {
    //         const file = item.file;
    //         const reader = new FileReader();
    //         reader.onload = function (e) {
    //             const wrapper = document.createElement("div");
    //             wrapper.className = "text-center";
    //             wrapper.style.width = "75px";

    //             const img = document.createElement("img");
    //             if (file.type.startsWith("image/")) {
    //                 img.src = e.target.result;
    //             } else if (file.name.toLowerCase().endsWith(".pdf")) {
    //                 img.src = "../dashboard/assets/images/pdf-icon.png";
    //             } else {
    //                 img.src = "../dashboard/assets/images/file-icon.png";
    //             }

    //             img.alt = file.name;
    //             img.className = "rounded border p-1";
    //             img.style.width = "70px";
    //             img.style.height = "70px";
    //             img.style.objectFit = "cover";
    //             img.style.cursor = "pointer";
    //             img.title = file.name;

    //             img.addEventListener("click", () => {
    //                 showPreview(file);
    //             });

    //             const caption = document.createElement("div");
    //             caption.className = "small text-muted mt-1";
    //             caption.style.fontSize = "11px";
    //             caption.textContent = file.name.length > 15 ? file.name.slice(0, 12) + "..." : file.name;


    //             wrapper.appendChild(img);
    //             wrapper.appendChild(caption);
    //             thumbnailsContainer.appendChild(wrapper);
    //             };

    //         reader.readAsDataURL(file);
    //     });

    //     const modal = new bootstrap.Modal(document.getElementById("confirmModal"));
    //     modal.show();
    // });

    function prepareSelectedPersonnelJson(){
        const rows = document.querySelectorAll("#personnelTableBody tr");
        const updatedList = [];

        rows.forEach(row => {
            const id = row.querySelector(".personnel-id").value;
            const canRead = row.querySelector(".can-read").checked;
            const canCreate = row.querySelector(".can-create").checked;
            const canUpdate = row.querySelector(".can-update").checked;
            const canDelete = row.querySelector(".can-delete").checked;
            const canComment = row.querySelector(".can-comment").checked;

            if (canRead || canCreate || canUpdate || canDelete || canComment) {
                updatedList.push({
                    PersonnelId: parseInt(id),
                    CanRead: canRead,
                    CanCreate: canCreate,
                    CanUpdate: canUpdate,
                    CanDelete: canDelete,
                    CanComment: canComment
                });
            }
        });

        selectedPersonnel = updatedList;
        document.getElementById("SelectedPersonnelJson").value = JSON.stringify(selectedPersonnel);
        document.querySelectorAll('#personnelTableBody input[type=checkbox]').forEach(cb =>
          cb.addEventListener('change', prepareSelectedPersonnelJson)
        );

    }
    window.addEventListener("DOMContentLoaded", () => {
        let existing = [];
        try {
            existing = JSON.parse(`@Html.Raw(JsonConvert.SerializeObject(Model?.ExistingDocuments ?? new List<PTP.UI.Models.DocumentViewModel>()).Replace("\\", "\\\\").Replace("`", "\\`"))`);
            console.log("Existing JSON:", `@Html.Raw(JsonConvert.SerializeObject(Model?.ExistingDocuments ?? new List<PTP.UI.Models.DocumentViewModel>()))`);
        } catch (e) {
            console.log("JSON parse hatası:", e);
            existing = [];
        }


        selectedFiles = existing.map(d => ({
            id: d.Id,
            fileName: d.FileName,
            filePath: d.FilePath,
            documentDescriptions: d.DocumentDescriptions,
            file: null
        }));
        renderSelectedFiles();
        document.getElementById("btnPreview").addEventListener("click", function (e) {
                e.preventDefault();

                prepareSelectedPersonnelJson();

                const descriptions = selectedFiles.map(item => item.documentDescriptions || "");
                document.getElementById("DocumentDescriptionsJson").value = JSON.stringify(descriptions);

                const formElement = document.getElementById('projectForm');
                    const formData = new FormData(formElement);

                    const projectIdInput = document.querySelector('input[name="ProjectId"]');
                    if (projectIdInput) {
                        formData.append("ProjectId", projectIdInput.value);
                    }

                    const docMeta = selectedFiles.map(f => ({
                        id: f.id,
                        fileName: f.fileName,
                        filePath: f.filePath,
                        documentDescriptions: f.documentDescriptions
                    }));

                    formData.append("DocumentJson", JSON.stringify(docMeta));

                    selectedFiles.forEach(f => {
                        if (f.file) {
                            formData.append("ProjectFiles", f.file);
                        }
                    });

            fetch(formElement.action, { method: "POST", body: formData })
            .then(r => r.ok ? location.href = "/Project/Index"
                            : r.text().then(t => alert("Hata:\n" + t)));
        });
    });
</script>

